Description: >
  Hubert WÃ³jowicz - Udacity Cloud DevOps Engineer Nanodegree Program
  Project 2: Udagram - Server part definition

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefix for resources
    Type: String
    
Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Incomming/outgoing traffic rules for Application Load Balancer
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - Description: Allow all incoming HTTP traffic on port 80 from application clients
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow all outgoing HTTP traffic on port 80 to reach servers instances
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Load-Balancer-Security-Group

  ServerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Incomming/outgoing traffic rules for EC2 instance
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - Description: Allow all incoming HTTP port 80 traffic
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # - Description: allow incoming ssh connections to machine - development only
        #   IpProtocol: tcp
        #   FromPort: 22
        #   ToPort: 22
        #   CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow all traffic initiated on EC2 to download security updates
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2-Security-Group
          
  EC2UdacityS3ReadOnlyRole:
    Type: AWS::IAM::Role
    Properties:
      Description: This role allow EC2 to access s3 public bucket to copy website files
      RoleName: EC2UdacityS3ReadOnlyRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: UdacityS3ReadOnlyEC2Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: "arn:aws:s3:::udacity-demo-1/*"
              - Effect: Allow
                Action: s3:GetObject
                Resource: "arn:aws:s3:::udacity-demo-1/udacity.zip"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2-Role

  UdacityS3ReadOnlyECInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: EC2UdacityS3ReadOnlyRole
    Properties:
      Roles:
        - EC2UdacityS3ReadOnlyRole

  ServerInstancesLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install unzip awscli -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          cd /var/www/html
          sudo aws s3 cp s3://udacity-demo-1/udacity.zip .
          sudo unzip -o udacity.zip
      ImageId: ami-03ba3948f6c37a4b0 # Ubuntu Server 18.04 LTS (HVM), SSD Volume Type
      IamInstanceProfile: !Ref UdacityS3ReadOnlyECInstanceProfile
      #KeyName: UdagramMachines # development only - allow to access EC2 with public IP via SSH
      SecurityGroups: !Ref ServerInstanceSecurityGroup
      InstanceType: t3.medium # CPU cores 2/RAM-4GB/storage-EBS only/network performance-Low to Moderate
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  ServerInstancesAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PRIV-NETS
      LaunchConfigurationName: !Ref ServerInstancesLaunchConfig
      MinSize: "4"
      MaxSize: "10"
      TargetGroupARNs: !Ref ServerInstancesTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-AutoScalingGroup

  ServerInstancesLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ServerInstancesTargetGroup
      LoadBalancerArn: !Ref ServerInstancesLoadBalancer
      Port: 80
      Protocol: HTTP

  ServerInstancesListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ServerInstancesTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  ServerInstancesTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${EnvironmentName}-VPCID
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LoadBalancer-TargetGroup

Outputs: 
  WebAppLbDns:
    Description: Website access address
    Value: !Join ["",["http://", !GetAtt ServerInstancesLoadBalancer.DNSName]]
